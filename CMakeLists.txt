CMAKE_MINIMUM_REQUIRED(VERSION 3.21)

# START: FIND VCPKG TOOLCHAIN FILE
SET(NO_VCPKG_TOOLCHAIN_FILE TRUE)
FOREACH (THE_TOOLCHAIN_FILE ${CMAKE_TOOLCHAIN_FILE} ${CMAKE_TOOLCHAIN_FILE_OVERRIDE})
    IF (${THE_TOOLCHAIN_FILE} MATCHES "vcpkg.cmake" AND EXISTS ${THE_TOOLCHAIN_FILE})
        SET(NO_VCPKG_TOOLCHAIN_FILE FALSE)
    ENDIF ()
    IF (NOT NO_VCPKG_TOOLCHAIN_FILE)
        break () # there is a vcpkg toolchain file
    ENDIF ()
ENDFOREACH ()
IF (${NO_VCPKG_TOOLCHAIN_FILE})
    IF (DEFINED ENV{VCPKG_ROOT} AND EXISTS "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake")
        LIST(APPEND CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake")
    ELSEIF (DEFINED ENV{VCPKG_DIR} AND EXISTS "$ENV{VCPKG_DIR}/scripts/buildsystems/vcpkg.cmake")
        LIST(APPEND CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_DIR}/scripts/buildsystems/vcpkg.cmake")
    ELSE ()
        MESSAGE(FATAL_ERROR "No VcPkg toolchain file found")
    ENDIF ()
ENDIF ()
## END: FIND VCPKG TOOLCHAIN FILE

# Read the vcpkg.json file
FILE(READ "${CMAKE_SOURCE_DIR}/vcpkg.json" VCPKG_JSON_RAW)
# Parse "version-string" from JSON content
STRING(JSON VCPKG_JSON_VERSION_STRING GET ${VCPKG_JSON_RAW} "version-string")

# Project information
PROJECT(HelloWorldProject VERSION ${VCPKG_JSON_VERSION_STRING} LANGUAGES CXX)
SET(THIS_EXEC hello_world)

# Generate version.h file
SET(GENERATED_SOURCE_FILES_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")
FILE(MAKE_DIRECTORY ${GENERATED_SOURCE_FILES_DIR})
FILE(WRITE "${GENERATED_SOURCE_FILES_DIR}/version.h"
        "#pragma once\n"
        "// This file is generated by CMake\n"
        "// Do not edit this file\n"
        "#define ${PROJECT_NAME}_VERSION_STRING \"${VCPKG_JSON_VERSION_STRING}\"\n"
        "#define ${PROJECT_NAME}_VERSION_MAJOR ${${PROJECT_NAME}_VERSION_MAJOR}\n"
        "#define ${PROJECT_NAME}_VERSION_MINOR ${${PROJECT_NAME}_VERSION_MINOR}\n"
        "#define ${PROJECT_NAME}_VERSION_PATCH ${${PROJECT_NAME}_VERSION_PATCH}\n"
        )

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

FIND_PACKAGE(fmt CONFIG REQUIRED)
FIND_PACKAGE(Boost REQUIRED COMPONENTS unit_test_framework)

# MAIN TARGET
ADD_EXECUTABLE(${THIS_EXEC}
        src/main.cpp
        )
TARGET_LINK_LIBRARIES(${THIS_EXEC}
        PRIVATE
        fmt::fmt
        )
TARGET_INCLUDE_DIRECTORIES(${THIS_EXEC}
        PRIVATE
        ${GENERATED_SOURCE_FILES_DIR}
        )
TARGET_COMPILE_OPTIONS(${THIS_EXEC} PRIVATE
        $<$<CXX_COMPILER_ID:MSVC>:/WX /W4>
        $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall -Wextra -Wpedantic -Werror -Wconversion>
        )

include(scripts/functions.cmake)

# TEST TARGET
ADD_TESTS_TARGET_FOR_TARGET_FROM_TESTS_DIR(${THIS_EXEC} ${THIS_EXEC}_tests ""
        INCLUDE_DIRECTORIES
        COMPILE_DEFINITIONS
        COMPILE_OPTIONS
        LINK_LIBRARIES
        LINK_DIRECTORIES
        SOURCE_DIR)

# Install the executable to the install directory
SET(EXEC_INSTALL_DIR "./")
INSTALL(TARGETS ${THIS_EXEC} RUNTIME DESTINATION ${EXEC_INSTALL_DIR})
# Install the dependencies to the install directory
GET_PROPERTY(this_target_linked_libs TARGET ${THIS_EXEC} PROPERTY LINK_LIBRARIES)
FOREACH (lib IN LISTS this_target_linked_libs)
    GET_TARGET_PROPERTY(lib_type ${lib} TYPE)
    IF (lib_type STREQUAL "INTERFACE_LIBRARY" OR lib_type STREQUAL "STATIC_LIBRARY")
        CONTINUE()
    ENDIF ()

    IF (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        GET_TARGET_PROPERTY(lib_location ${lib} LOCATION_DEBUG)
    ELSE ()
        GET_TARGET_PROPERTY(lib_location ${lib} LOCATION_RELEASE)
    ENDIF ()
    IF (lib_location)
        INSTALL(FILES ${lib_location} DESTINATION ${EXEC_INSTALL_DIR} CONFIGURATIONS ${CMAKE_BUILD_TYPE})
    ENDIF ()
ENDFOREACH ()

# Packaging information
INCLUDE(InstallRequiredSystemLibraries)
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
SET(CPACK_SET_DESTDIR "${CMAKE_CURRENT_SOURCE_DIR}/installers/")
SET(CPACK_PACKAGE_VERSION_MAJOR "${${PROJECT_NAME}_VERSION_MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR "${${PROJECT_NAME}_VERSION_MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH "${${PROJECT_NAME}_VERSION_PATCH}")
SET(CPACK_PACKAGE_CONTACT "Ishansh Lal <t.RED.0_0@proton.me>")

# For creating installers for Platforms
IF (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    SET(CPACK_GENERATOR "NSIS")
ELSEIF (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Ishansh Lal <t.RED.0_0@proton.me>")
    SET(CPACK_GENERATOR "DEB")
ENDIF ()
INCLUDE(CPack)
