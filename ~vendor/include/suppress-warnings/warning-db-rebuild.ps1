param(
	[string]$OutDir = $PSScriptRoot
)

$db = @"
{
    "compilers": {
        "GCC": {
            "#if": "defined(__GNUC__)",
            "#has": "__has_warning (\"{}\")",
            "#begin": "#pragma GCC diagnostic push",
            "#add": "#pragma GCC diagnostic ignored \"{}\"",
            "#end": "#pragma GCC diagnostic pop"
        },
        "Clang": {
            "#if": "defined(__clang__)",
            "#has": "__has_warning (\"{}\")",
            "#begin": "#pragma clang diagnostic push",
            "#add": "#pragma clang diagnostic ignored \"{}\"",
            "#end": "#pragma clang diagnostic pop"
        },
        "MSVC": {
            "#if": "defined(_MSC_VER)",
            "#begin": "#pragma warning(push)",
            "#add": "#pragma warning(disable : {})",
            "#end": "#pragma warning(pop)"
        }
    },
    "suppress-warnings": {
        "literal-conversion": { "MSVC": 4244, "GCC|Clang": "-Wliteral-conversion", "groups": [ "common" ] },
        "macro-redefined": { "MSVC": 4005, "GCC,Clang": "-Wmacro-redefined", "groups": [ "common" ] },
        "variable-unused": { "MSVC": 4189, "GCC,Clang": "-Wunused-variable", "groups": [ "common" ] }
    }
}
"@ | ConvertFrom-Json -AsHashtable
$prepend = @"
// This file is generated by warning-db.ps1`n
"@

# split '|' or ',' separated values into an their own keys
foreach ($obj_key in $db['suppress-warnings'].Keys) {
	$obj = $db['suppress-warnings'][$obj_key]
	$keys = @($obj.Keys)
	foreach ($key in $keys) {
		if ($key -match '\|') {
			$key -split '\|' | % { $obj[$_] = $obj[$key] }
			$obj.Remove($key)
		}
		if ($key -match ',') {
			$key -split ',' | % { $obj[$_] = $obj[$key] }
			$obj.Remove($key)
		}
	}
}

$groups = @{
	all = @()
}

# For each warning in the database, create a new cpp header file
foreach ($warning_name in $db['suppress-warnings'].Keys) {
	$warning = $db['suppress-warnings'][$warning_name]
	$filename = $warning_name -replace '[^a-zA-Z0-9_-]','' -replace '_+','_' -replace '-+','-'
	$name_upper = $filename.ToUpper() -replace '[^A-Z0-9]','_'

	$content = @"
$prepend
#if !defined(WARNINGS_SUPPRESSION_ACTIVE)
	#error "File included directly outside of warnings suppression scope."
#endif

#if !WARNINGS_SUPPRESSION_ACTIVE
	#undef WARNINGS_SUPPRESSED_FOR_$($name_upper)
#elif !defined(WARNINGS_SUPPRESSED_FOR_$($name_upper))
	#define  WARNINGS_SUPPRESSED_FOR_$($name_upper)
`n
"@

	# For each compiler, add a warning disable
	foreach($compiler in $db['compilers'].Keys) {
		$compiler_is = $db['compilers'][$compiler]['#if']
		$has_flag_checker = $db['compilers'][$compiler]['#has']
		$apply_flag = $db['compilers'][$compiler]['#add'].Replace('{}', $warning[$compiler])

		if ($compiler_is -eq $null -or $compiler_is -eq '') {
			$compiler_is = "defined(COMPILER_$compiler)"
		}
		$entry = "`t#if $compiler_is`t// $compiler`n"
		
		if ($has_flag_checker -ne $null -and $has_flag_checker -ne '') {
			$has_flag_checker = $has_flag_checker.Replace('{}', $warning[$compiler])
			$entry += "`t`t#if $has_flag_checker`n"
		}

		if ($apply_flag -ne $null -and $apply_flag -ne '') {
			$entry += "`t`t`t$apply_flag`n"
		} else {
			Write-Warning "No warning suppression flag defined for $compiler (from $warning_name)"
			$entry += "`t`t`t#error `"No warning suppression flag defined for $compiler`"`n"
		}

		if ($has_flag_checker -ne $null -and $has_flag_checker -ne '') {
			$entry += "`t`t#endif`n"
		}

		$entry += "`t#endif`n"
		$content += $entry
	}

	$content += @"
#endif
"@

	Write-Host "Creating file: $filename" -NoNewline
	$content | Out-File -FilePath "$OutDir/$filename" -Encoding utf8 
	Write-Host " - Done"

	foreach ($tag in $warning.groups) {
		if ($groups[$tag] -eq $null) {
			$groups[$tag] = @()
		}
		$groups[$tag] += $filename
	}

	$groups['all'] += $filename
}

if (!(Test-Path "$OutDir/groups")) {
	New-Item -ItemType Directory -Path "$OutDir/groups" | Out-Null
}

# Create a group header file for each group
foreach ($group in $groups.Keys) {
	$content = $prepend
	$content += $groups[$group] | % { "#include `"../$_`"`n" } | Out-String
	
	$filename = $group -replace '[^a-zA-Z0-9_-]','' -replace '_+','_' -replace '-+','-'
	$content | Out-File -FilePath "$OutDir/groups/$filename" -Encoding utf8
}

# Create push/pop header files
@"
$prepend
#if defined(WARNINGS_SUPPRESSION_ACTIVE)
	#error "Warnings must be popp'ed before including this file"
#else
	#define WARNINGS_SUPPRESSION_ACTIVE 1
#endif

#define WARNINGS_SUPPRESSION_DUMMY_PUSH
`n
"@ + ($db['compilers'].Keys | % {
		@"
#if $($db['compilers'][$_]['#if'])`t// $_
	#undef WARNINGS_SUPPRESSION_DUMMY_PUSH
	$($db['compilers'][$_]['#begin'])
#endif`n
"@
}) | Out-File -FilePath "$OutDir/push" -Encoding utf8

@"
$prepend
#if !defined(WARNINGS_SUPPRESSION_ACTIVE)
	#error "Warnings must be pushed before including this file"
#else
	#undef WARNINGS_SUPPRESSION_ACTIVE
#endif

#define WARNINGS_SUPPRESSION_DUMMY_POP
`n
"@ + ($db['compilers'].Keys | % {
		@"
#if $($db['compilers'][$_]['#if'])`t// $_
	#undef WARNINGS_SUPPRESSION_DUMMY_POP
	$($db['compilers'][$_]['#end'])
#endif`n
"@
}) + @"
#if defined(WARNINGS_SUPPRESSION_DUMMY_POP)
	#if !defined(WARNINGS_SUPPRESSION_DUMMY_PUSH)
		#error "implementation mismatch"
	#else
		#undef WARNINGS_SUPPRESSION_DUMMY_PUSH
		#undef WARNINGS_SUPPRESSION_DUMMY_POP
	#endif
#endif

// Restore warnings suppression state
#define WARNINGS_SUPPRESSION_ACTIVE 0
#include "./groups/all"
#undef WARNINGS_SUPPRESSION_ACTIVE
"@ | Out-File -FilePath "$OutDir/pop" -Encoding utf8

return 0