name: Build, Test, Package and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    if: github.event_name != 'pull_request' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release ]

    outputs:
      release_version: ${{ steps.get_release_version.outputs.release_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 'e2ca0145eda96cb8b2f972d9ff4b7bd1619fefa0'
          vcpkgJsonGlob: '**/vcpkg.json'
          runVcpkgInstall: false

      - name: Set up CMake, Ninja, and required tools
        shell: pwsh
        run: |
          if ("${{ runner.os }}" -eq "Linux") {
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build
          } elseif ("${{ runner.os }}" -eq "Windows") {
            choco install -y cmake ninja nsis
          } else {
            return 1
          }

      - name: Build, Test and Package
        shell: pwsh
        run: |
          Invoke-Expression "./scripts/build_test_and_package.ps1 -OS ${{ runner.os }} -BuildType ${{ matrix.build_type }}" -OutVariable path_to_package
          Write-Host "OUTPUT_PACKAGE: $(./scripts/pack_to_single_file.ps1 -DirPath $path_to_package -CompressedFileNameIfRequired ${{ matrix.os }}_${{ matrix.build_type }})"

      - name: Get Release Version
        id: get_release_version
        if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'Release'
        shell: pwsh
        run: |
          $json_content = Get-Content -Path './vcpkg.json' -Raw | ConvertFrom-Json
          echo "version-string: $($jsonContent.'version-string')"
          echo "::set-output name=release_version::$($jsonContent.'version-string')"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: all
          path: installers/*

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Verify artifacts
        run: tree -L 3 ./artifacts

      - name: Create Release Tag ID
        id: create_tag
        run: |
          echo "::set-output name=id::$(git rev-parse --short HEAD)"
          echo "::set-output name=version::${{ needs.build.outputs.release_version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.id }}
          release_name: Release ${{ steps.create_tag.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Artifacts to Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          cd artifacts/all
          for file in *; do
            echo "Uploading $file"
            gh release upload ${{ steps.create_tag.outputs.id }} "$file" --clobber
          done
