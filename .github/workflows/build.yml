name: Build, Test, Package and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    if: github.event_name != 'pull_request' || (github.event.pull_request.merged == true && github.head_ref == 'main')
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 'e2ca0145eda96cb8b2f972d9ff4b7bd1619fefa0'
          vcpkgJsonGlob: '**/vcpkg.json'
          runVcpkgInstall: false

      - name: Set up CMake, Ninja, and required tools
        shell: pwsh
        run: |
          if ( "${{ runner.os }}" -eq "Linux" ) {
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build
          } elseif ( "${{ runner.os }}" -eq "Windows" ) {
            choco install -y cmake ninja nsis
          } else {
            return 1
          }

      - name: Build, Test and Package
        shell: pwsh
        run: |
          if ( "${{ runner.os }}" -eq "Linux" ) {
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build
          } elseif ( "${{ runner.os }}" -eq "Windows" ) {
            choco install -y cmake ninja
          }
          $presetName = "${{ runner.os }} x64 - Ninja - Clang @ ${{ matrix.build_type }}"
          $env:VCPKG_ROOT = "$env:VCPKG_ROOT" -replace '\\', '/'
          try{
            cmake --preset $presetName
            pushd "./build/$presetName"
          
              cmake --build . --config ${{ matrix.build_type }}
              cmake --build . --target test
          
              cpack -C Release
          } catch { Write-Host $_ }
          finally { 
            popd
          }
          
          Remove-Item -Path "./installers/_CPack_Packages" -Recurse -Force -ErrorAction Ignore

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.build_type }}
          path: installers/*

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || (github.event.pull_request.merged == true && github.head_ref == 'main')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Verify artifacts
        shell: pwsh
        run: |
          if ( "${{ runner.os }}" -eq "Linux" ) { 
            tree -L 3 ./artifacts
          }

      - name: Extract commit ID
        id: extract_commit
        run: echo "::set-output name=commit_id::$(git rev-parse --short HEAD)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ steps.extract_commit.outputs.commit_id }}
          release_name: Release ${{ steps.extract_commit.outputs.commit_id }}
          draft: false
          prerelease: false

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-latest-Release/
          asset_name: HelloWorldProject-1.0.0-win64.exe
          asset_content_type: application/octet-stream

      - name: Upload Ubuntu Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ubuntu-latest-Release/
          asset_name: HelloWorldProject-1.0.0-Linux.deb
          asset_content_type: application/octet-stream
