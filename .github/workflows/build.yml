name: Build, Test, Package and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    if: github.event_name != 'pull_request' || (github.event.pull_request.merged == true && github.head_ref == 'main')
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Debug, Release ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 'e2ca0145eda96cb8b2f972d9ff4b7bd1619fefa0'
          vcpkgJsonGlob: '**/vcpkg.json'
          runVcpkgInstall: false

      - name: Set up CMake, Ninja, and required tools
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            choco install -y cmake ninja
            echo "C:\Program Files\CMake\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          fi

      - name: Build, Test and Package
        shell: pwsh
        run: |
          $presetName = if ($os -eq "windows-latest") { "Windows" } else { "Linux" }
          $presetName += " x64 - Ninja - Clang @ ${{ matrix.build_type }}"
          try{
            tree -L ./build
            which ninja
          } catch { Write-Host "$_" }
          try{
            cmake --preset $presetName
          pushd "./build/$presetName"
            cmake --build . --config ${{ matrix.build_type }}
            cmake --build . --target test
            cmake --install . --prefix install --component Runtime --strip --verbose
          } catch { Write-Host $_ }
          finally { popd }

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.build_type }}
          path: install

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || (github.event.pull_request.merged == true && github.head_ref == 'main')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-latest-Release/install/HelloWorldProject-1.0.0-win64.exe
          asset_name: HelloWorldProject-1.0.0-win64.exe
          asset_content_type: application/octet-stream

      - name: Upload Ubuntu Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ubuntu-latest-Release/install/HelloWorldProject-1.0.0-Linux.deb
          asset_name: HelloWorldProject-1.0.0-Linux.deb
          asset_content_type: application/octet-stream
